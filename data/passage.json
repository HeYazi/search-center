{
  "code": 0,
  "data": {
    "records": [
      {
        "id": "1680826349238882305",
        "title": "给学弟妹们的 10 个秋招建议！",
        "description": null,
        "content": "大家好，我是鱼皮。最近很多大公司的提前批陆陆续续开启了，说明秋招已经拉开了序幕，大家要准备起来了。\n\n所以我也赶紧写了一篇文章，结合自己曾经大厂求职的经验，并且从招聘方的角度，给学弟妹们一些秋招找工作的实质性建议，希望对大家有帮助。\n\n这次先分享 10 条建议，目标是尽量帮大家进大厂，所以部分建议对大多数同学来说可能会比较高。\n\n注意，以下建议不需要全部都做到，只要你能做到 **5 点及以上** ，你的秋招大概率会圆满上岸！\n\n\n\n### 1、早就是机会\n\n做任何事情都是一样的，准备和行动地越早，机会就越大。\n\n具体怎么 “早” 呢？\n\n首先， **能秋招，不春招！**\n\n之前有同学问我：鱼皮，我才刚学 Java 两个月，还要准备秋招么？是不是直接准备明年的春招就好了？\n\n千万别！\n\n即使你觉得自己在秋招截止前没法准备好，也不要把目标直接就定为 “明年的春招”。相信大家都是这样的，给自己定的目标越远，越容易拖延。\n\n如果你是今年有机会参与秋招的应届生，就把目标定为 “秋招上岸”，哪怕时间紧一点，不要犹豫，抓紧去学、去突击，而不是直接放弃。\n\n因为等到春招的时候，秋招已经上岸的同学、考研结束的同学、又准备了半年的同学都会一起来竞争越来越少的岗位，而且形式会更不明朗。\n\n所以早早行动起来，才是 “破卷” 的第一要义！\n\n另外，大家已经可以持续关注和寻找机会了，提前到网上了解一些公司开放招聘的时间、线上线下的宣讲会等，提前做好投递简历准备，而不是等到公司正式开放招聘，才去看公司的要求、再去写简历。\n\n> 另外还有一个我个人的行动准则，加引号是因为仅供参考。那就是在心态上 “别给自己留退路”，别老想着自己这件事做不成了还有其他的选择，而是要把所有的精力都放在秋招上，全力冲刺。\n\n\n\n### 2、一专多长\n\n因为如今网上的学习教程和项目教程都太多了，会导致大家的简历和经历没有什么区分度。\n\n想象一下，如果你在刷短视频，看到很多发量差不多的程序员在讲差不多的知识，可能一秒钟就划走了；但如果突然有一位光头强者、或者一位漂亮的小姐姐（女装大佬）在讲知识，那么你大概率会忍不住多刷几秒。\n\n面试官或 HR 看我们的简历也是一样的，如果我们简历上的技术千篇一律，都是大家耳熟能详的，而且写得又都差不多，那么很快就被他们 “划走了”。\n\n所以，建议大家在学完主流的开发技术之余，选择 **至少一个** 技术去深入学习，作为你个人的专长来吸引面试官。\n\n比如 MySQL 数据库，大家都会写 “熟悉索引、事务、性能优化” 等；但如果你阅读过一些 MySQL 高级书籍，可以去写你对查询优化器、MySQL 高可用、数据备份恢复、底层索引优化的理解和实践。从 “学习者” 变成 “实践者”，再从 “实践者” 变成 “研究者”，你的优势就会被放大。\n\n一个比较推荐的路子就是建议大家去阅读某个技术的高级书籍，了解其底层原理后，试着阅读 GitHub 上的简化版底层实现源码，再去阅读官方开源代码，并尝试提出一些 PR。\n\n如果你能给知名项目成功贡献 PR，那基本就稳了。\n\n\n\n### 3、分清主次\n\n大家刚准备秋招的时候，基本都会面临一个问题：我滴妈呀，八股文这么多，怎么背的完呀？！从哪开始背啊？！\n\n更可怕的是，你会发现八股文是越背越多的。。。\n\n其实完全不用慌，网上的八股文多，是因为随着时间持续不断积累和完善，但并不是说你要去背完所有的八股文。\n\n我们要做的是， **从我们自身的简历出发** ， **优先** 锁定可能会考到自己身上的八股文，分清主次。\n\n举个例子，你在简历上写了 “熟悉 Redis 的 RDB 和 AOF 机制”、并且项目中又运用到了 Redis。那么面试官大概率会考察 Redis 相关的八股文，你就针对性地去搜集和准备 Redis 相关的题目即可。\n\n无论你的时间多或少，都应该这么做。而不是别人背什么，我就背什么。\n\n当然，八股文肯定是准备得越充分越好。等把和自己简历强相关的八股文背完后，如果有时间，去网上搜集一些经典高频八股文，准备一下肯定是更加分的。\n\n\n\n### 4、视角切换\n\n很多同学由于没有过实习和招聘经验，写出的简历很容易停留在 “学生思维”。\n\n举个经典的例子：很多同学会在简历上写自我评价，比如 “我的学习能力强”。\n\n写自我评价本身没什么问题，但一定要有说服力。因为从招聘者的角度，如果不给出具体的事例证明，完全就是你在自夸而已。\n\n如果你要证明自己的学习能力强，就列举一些自学的例子、学习获奖的经历等等；证明自己写文档的能力强，就贴上自己写过的文档链接等。\n\n还有个例子，有些同学会觉得简历上的内容写得越多越好，甚至能写到 3 页纸。但事实上，简历内容在精不在多，就跟做视频一样，你能用最短的内容给别人讲明白一个知识点，效果会比长篇大论来解释更好。所以，尽量避免凑字数、写重复的技术、写重复的项目、写 “正确的废话”。\n\n当然，这也不绝对，在你的简历还写不满一页的时候，有啥就写啥吧，后期持续优化，优胜劣汰。\n\n我们要试着切换视角，想象一下，你如果是面试官，看到自己的这份简历，会问什么问题、觉得哪里写得好或不好。\n\n\n\n### 5、有的放矢\n\n这个技巧比较适用于时间较多、准备较充分、特别想进某个公司的同学。\n\n想象一下，如果你是一家公司的老板，现在有 2 名同学投递了简历。一位同学的简历是通用的，可以投递给所有公司；而另一位同学的简历是针对你们公司做了特定优化的，比如添加了公司的 Logo、在个人优势中响应了公司的价值观、对公司的业务有过研究等等。\n\n> 我在投递字节跳动时，给个人特点那里加了 “追求极致”，不知道是不是心理作用，反正也过了。\n\n你会更倾向于录取哪位同学呢？答案大概率是后者对吧。\n\n大家具体可以怎么做呢？\n\n有时间的同学，可以仔细阅读公司的岗位描述、并且提前去网上了解下公司的业务和系统，有的放矢，针对性地准备项目和简历。\n\n举个例子，你想进字节跳动的抖音电商部门，如果你的简历上能有一个 “简化版抖音” 的项目，或者能够对电商业务有进一步的理解，肯定是加分的。如果你对这家公司的业务做过市场调研，分析过他们的系统或网站，能够直接在简历上给他们一些建议（帮忙修一些他们的 Bug），也是大大加分的。\n\n\n\n### 6、差异化\n\n前面也提到了，现在很多同学的简历，尤其是项目经历这块，写得都差不多，没有什么区分度。\n\n在很多年以前，是只要你的技术水平达到了公司的要求，就有被发起面试的机会；但是现在计算机行业在慢慢恢复平淡，大家现在都是海投公司、每个公司可能都要收到成百上千份简历、岗位数又是有限的，如果你的简历还和大家一模一样，那么得到面试机会的概率就没那么高了。\n\n想要让自己的简历从海选中脱颖而出，一定要有一些差异化的内容。\n\n除了前面提到的 “一专多长”，要有至少一个有点深度的技术外，还有很多给简历增加区分度的方法。比如，给网络热门项目换皮，并且自主增加 2 - 3 个原本项目没有的功能；再比如去学一个相对新一点的技术、或者网上教程比较少的技术，比如后端的云原生相关中间件、服务网格、Serverless、DDD 架构设计等等。\n\n此外，如果你能有一些开源项目、或者个人上线项目经历的话，也能进一步突出自己的实践能力。告诉面试官：你不止能跟着教程完成项目，而是真的能 **自己做项目** 。\n\n\n\n### 7、持续复盘\n\n有同学向我抱怨过：鱼皮，我已经投了 1000 份简历了，为什么还是没回复呢？\n\n大家觉得会是什么原因？\n\n首先必须承认，就业环境是一个因素，但更多的则是这位同学本身的简历（或者投递简历的方式）是存在问题的。\n\n不幸的是，有些同学意识不到这点，可能就直接放弃了。\n\n需要注意的是，求职是一个 **持续的过程** 。不要因为前期的投递没有回复，就去否定自己，能用初版简历得到面试机会的，毕竟还是少数人。\n\n改变不了环境和学历等硬性条件，我们要做的便是改变自己。\n\n- 简历没有回复，就去对比其他同学的简历，持续学习来完善自己的简历，而不是始终拿老的同一份简历投递。\n- 面试不通过，就分析自己哪些面试题答的不好，或者是计算机基础不过关等等。在面试后立刻去把这些题目搞懂。\n\n我最初是在大二时就向腾讯等一线大厂投递了简历，由于当时的简历太菜，没有任何一家的回复。但是我持续更新自己的简历，等到大三暑期实习还没正式开放前，就收到了多个城市腾讯的主动面试邀请。\n\n总之一句话，秋招路漫漫，你要始终往前走，而不是原地等待好运降临。\n\n\n\n### 8、保持理性\n\n现在大家都比较焦虑，网上也有很多 “前端已死”、“后端已凉” 的言论。\n\n其实客观来看，从 22 年、甚至再早一些的时候，计算机的红利期就已经过去了。现在并不是说学计算机就找不到工作，只不过门槛提高了，不再像是几年前随便学点儿 servlet、学点儿前端三件套就能找到工作了而已。\n\n面对这种情况，我们还是要保持理性，思考一下：\n\n1）学计算机真的找不到工作么？还是说幸存者偏差，找到工作的不说话，找不到工作的组团抱怨？\n\n2）现在临时转行、或者突然放弃，对你来说是不是一个最优解？除了计算机之外，自己适合哪些工作呢？其他工作就好找么？\n\n如果你不学计算机的话，还有更好的选择，那么当然可以不学；但如果你只是因为这些言论和一些短暂的失败就 **轻易放弃自己学了几年的技术** ，尝试其他的方向，就能找到工作了么？\n\n理性客观地看待问题，做好自己该做的事情，总比跟风抱怨、或者什么都不做要好。\n\n\n\n### 9、建立连接\n\n所谓建立连接，就是尽可能多地认识大佬，积累人脉。\n\n举个最简单的例子，如果某家公司只招一个人，你是面试官，有两个候选者，一个人是你的朋友，另一个人你完全不认识，你会录取哪个人呢？\n\n建立连接其实是件很简单的事情，你可以多和学长学姐交流，如果他们进了公司，自然可以帮你内推；你可以多和面试官交流，在面试结束后主动询问联系方式，说不定后面他有其他的机会还能给你推荐；你可以多和 HR 交流，关系好了甚至可以得到一些行业内幕。\n\n此外，还可以通过写博客、开源社区、交流会等方式，认识更多同行者，一方面是抱团取暖，另外一方面，也是需要向上社交。想象一下，如果你的好友列表里有一位编程大牛，在求职中遇到了问题可以向他请教，能帮你节省多少时间？\n\n这是我之前收到的字节邀请，就是从 GitHub 上认识了我：\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20230714153452496.png)\n\n再讲个我个人的小故事，也是之前分享过的真实经历。我在回老家的路上坐车时，认识一位阿里的老乡，路上聊的甚欢，就加了微信。后面没多久，大佬就给我抛阿里 P6 的橄榄枝了。\n\n\n\n### 10、时间管理\n\n大家每天都是 24 小时，有人一天能做 5 件事，有人一天却完不成 1 件事。\n\n为什么？\n\n除去天赋和能力的区别，时间管理是一个影响效率的核心因素。\n\n秋招的时间是有限的，大家就更要做好时间管理，才能比别人跑的更快。\n\n怎么做好时间管理呢？简单来说，3 件事：\n\n1）制定计划：每天都想好自己接下来要做什么，定制好周目标、月目标、总目标等\n\n2）安排优先级：优先做对于实现你目标来说性价比最高的事情，比如你现在简历还没准备好，就先写简历；发现简历没项目，就先把重点放在项目上，尽量提高自己的简历通过率，而不是每天花过量时间去背八股文，结果反而没有面试机会。\n\n3）时间 “复用” ：时间有限的情况下，尽量用同一份时间做好多件事。\n\n举个例子，你在背八股文的过程中，如果学到了一个自己之前完全没接触过的知识，会怎么办？\n\n大多数同学会说：背下来！\n\nOK，这当然没问题。不过聪明的同学，可能会这么做。\n\n我把这个知识搞懂，然后补充到简历上；如果合适的话，再把这个知识点运用到项目中。这样既通过实践理解了题目，又完善了简历和项目。\n\n比如背到 MySQL 性能优化的知识点时，就把那些方法（比如添加索引、Explain 分析）应用到项目中实际测试下效果， 给你的印象肯定会更深刻。\n\n当然，这必然会花费额外的时间，只是给大家一种选择的思路。比起单纯的死记硬背，这种方式更有利于整体的进步。\n\n\n\n---\n\n\n\nOK，以上就是想给学弟妹们的一些秋招建议，洋洋洒洒 4000 多字，有帮助的话，点个赞吧~",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1601072287388278786/s01wbhSE-640.jpg",
        "language": null,
        "viewNum": 60,
        "thumbNum": 6,
        "favourNum": 2,
        "commentNum": 0,
        "priority": 0,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-07-17T06:26:44.000+00:00",
        "updateTime": "2023-07-19T08:49:05.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 1860,
          "coin": 170,
          "followeeNum": 908,
          "followNum": 6,
          "followStatus": null,
          "vipExpireTime": "2024-05-24T03:35:38.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-07-19T05:47:08.000+00:00"
        },
        "tags": [
          "文章",
          "校招",
          "面试",
          "求职"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1678810191656652801",
        "title": "目前 毕业典礼刚过 上家公司辞掉了（当下环境找工作比想象难...） 目前在找工作",
        "description": "皮哥好  最近都在投简历中 断断续续 投了也有200多份把（最近） 但是 好像没什么线上面试（只有线下的） 想让您帮看下简历，分析下是什么原因 是.net原因 还是个人技术还需要沉淀 还是？总之谢了！",
        "content": "\n![汪启明.png](https://pic.code-nav.cn/post_picture/1668342245532643329/SsNuQThW-汪启明.png)",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1668342245532643329/JiLUjeHL-汪启明.png",
        "language": null,
        "viewNum": 81,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 1,
        "priority": 0,
        "userId": "1668342245532643329",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-07-11T16:55:15.000+00:00",
        "updateTime": "2023-07-19T10:46:03.000+00:00",
        "user": {
          "id": "1668342245532643329",
          "planetCode": "23557",
          "userName": "明微漾+15207082567",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/QOpd26S7DURXtQwjpOoczo3Hv4f1qQTPlRbYxPiafLibfbwRnU4Vw8HzFvb0qsdJukibmMegiafSanibuDByethclvA/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2024-06-12T20:01:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-12T19:39:22.000+00:00",
          "updateTime": "2023-07-11T16:55:28.000+00:00"
        },
        "tags": [
          "简历",
          "文章"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1678745371980861442",
        "title": "除了 MySQL，这些数据库你都认识么？",
        "description": null,
        "content": "大家好，我是鱼皮，今天来聊聊数据库。\n\n什么是数据库？\n\n这个问题相信对学编程的朋友们来说过于简单了，大家想必都是增删改查的好手。\n\n但如果让你说出 10 种不同类型的数据库，阁下该如何应对？\n\n这篇文章，是对数据库技术的一个小科普，希望能帮大家了解到更多元化的数据库，便于拓宽学习思路和项目的技术选型。\n\n\n\n## 关系型数据库\n\n首先是我们接触最多的、也是入门后端必学的 **关系型数据库** 。\n\n在关系型数据库中，数据以 **表** 的形式进行组织和存储，每个表就像一个 Excel 表格，包含多个 **行** 和多个 **列** 。\n\n就比如我们经典的学生管理系统，把学生信息存储到关系型数据库中，结构大概是这样的：\n\n| 学号 | 学生姓名 | 所属班级号 |\n| ---- | -------- | ---------- |\n| 1    | 小李     | 1          |\n| 2    | 小鱼     | 2          |\n| 3    | 小皮     | 3          |\n\n上述学生表格中，每一行代表一个学生的信息，每一列代表学生的一个属性。我们可以使用结构化查询语言 SQL 来对关系型数据库表的数据进行灵活地查询、选择、过滤等。\n\n而关系型数据库最大的特点，就是表和表之间可以 **存在关系** 。比如学生管理系统中还可以有班级表，结构如下：\n\n| 班号 | 班级名称 |\n| ---- | -------- |\n| 1    | 快乐班   |\n| 2    | 泰酷班   |\n| 3    | 躺平班   |\n\n那如果我想知道某个学生所属的班级信息，只需要在查询时将学生表的 **所属班级号** 和班级表的 **班号** 进行关联，而不用把所有表格的列存储在一起，非常灵活。\n\n通过 SQL 可以连接查询多张表，得到下面的查询结果：\n\n| 学号 | 学生姓名 | 所属班级号 | 班级名称 |\n| ---- | -------- | ---------- | -------- |\n| 1    | 小李     | 1          | 快乐班   |\n| 2    | 小鱼     | 2          | 泰酷班   |\n| 3    | 小皮     | 3          | 躺平班   |\n\n\n\n除了查询灵活、数据表间存在关系外，关系型数据库还具有很多其他的优点。\n\n比较重要的是 **数据一致性** ，关系型数据库遵循 ACID 原则（原子性、一致性、隔离性和持久性），支持事务，可以保证多个操作同时进行时，数据的状态保持一致。比如 A 给 B 转账，A 扣钱 的同时 B 也会加钱，不会出现 A 扣了钱 B 却没收到钱的情况。\n\n兼顾查询的灵活和写入的准确性，使得关系型数据库几乎可以被应用于任何项目中！比如 CRM（客户关系管理）和 HRM（人力资源管理）等各类管理系统、数据分析系统、金融银行系统等。\n\n比较经典的关系型数据库产品有 MySQL、Oracle、PostgreSQL、Microsoft SQL Server 等。其中，MySQL 由于开源又易学，已经成为后端开发同学必学的数据库技术。\n\n关系型数据库的底层核心实现是 **基于关系模型的数学理论** ，最常见的实现方式是使用 B+ 树来存储索引结构，基于其平衡性，能够在存储大量数据时保持高效的查询性能，并且兼顾增删改操作的性能。\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20230710143858899.png)\n\n对于大多数项目，用 MySQL 等关系型数据库来存储数据就足够了。但关系型数据库不是银弹！在某些场景下，比如要存储的数据间没有关系时，它并不是最佳的选择。\n\n举个例子，当我们要写一篇文章，没有必要把数据存储到 Excel 表格里，可能直接将单篇文本放到 Word 里会更方便阅读和修改。\n\n这个时候，我们就需要与之互补的 **非关系型数据库** 。\n\n\n\n## 非关系型数据库\n\n非关系型数据库又叫 NoSQL。最简单的理解方式：关系型数据库适用于存储相互之间 **存在关系的数据表** ，那么非关系型数据库适用于关系不强的、结构相对灵活的、需要被快速访问的数据，比如字符串、JSON 等。\n\n实际项目开发中，最常用的非关系型数据库当属 KV 数据库。\n\nKV 即 Key-Value，数据是以 **键值对** 的方式存储在数据库中的。可以理解为一个 HashMap，数据库中存储的每个键都 **唯一对应** 一个值。键和值都可以是任意类型的数据，例如字符串、数字、数组等，非常灵活。\n\n比如存储每位用户的个人信息，结构大概是这样的：\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20230710155319420.png)\n\n由于 KV 存储的结构简单清晰，我们能够很轻松地根据某个键查找出对应的值，无论是读写数据性能都非常高。\n\n此外，KV 数据库还具备良好的可扩展性，由于数据间不存在直接关联，我们可以把键值对放到多个机器上存储，通过数据分片、负载均衡等策略来支持海量数据的高并发访问。\n\n由于高性能和高可扩展性，KV 数据库被广泛应用于缓存、分布式会话、分布式锁、实时统计等场景。\n\n最经典的 KV 数据库当属 Redis 了，它是开源的、基于内存的、高性能的数据库，不仅支持丰富的数据类型和功能，还有持久化等重要特性，也是后端同学必学的技术。其他的常用 KV 数据库有 LevelDB、RocksDB、Apache Cassandra 等。\n\nKV 数据库的底层实现比较灵活，常见的实现方式是使用哈希表来存储键值对。不同类型的值对应的实现方式也不同，比如 Redis 的字符串存储采用简单动态字符串（SDS）实现。\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20230710161101832.png)\n\n\n\n## 解决特定问题的数据库\n\n相信很多同学对数据库的印象就停留在 MySQL 和 Redis。的确，以上两类数据库几乎已经可以解决所有问题！\n\n但是，未必是最适合的。\n\n就像你完全可以用电脑自带的记事本软件来查看和编辑 HTML 网页文件，但是往往会选择一个更专业的开发工具来替代它。\n\n数据库也是一样，除了传统的关系和非关系型数据库之外，还有很多用于解决特定问题的数据库。它们往往针对特定的数据结构和应用场景进行了专门的优化和设计，能够提供更高效快捷的数据查询和存储，满足特定领域的需求。\n\n比如下面 8 种数据库：\n\n\n\n### 搜索引擎数据库\n\n顾名思义，搜索引擎数据库是为了实现搜索引擎功能的数据库。\n\n它适用于存储和管理大量的文本内容数据，并提供更快速、准确、灵活的全文检索功能。\n\n比如想要让用户更轻松地在你的博客内搜索文章，就可以使用搜索引擎数据库。\n\n为什么它能做到更快更灵活的搜索呢？这是因为在搜索引擎数据库中，数据一般是以 **倒排索引** 的方式存储的。\n\n倒排索引和传统的关系表有什么区别呢？\n\n以存储博客文档为例，传统的关系型数据库存储结构是：\n\n| 文档 id | 文档内容             |\n| ------- | -------------------- |\n| 1       | 感谢关注鱼皮         |\n| 2       | 鱼皮是一名程序员     |\n| 3       | 感谢关注屑老板不破产 |\n\n我们能够根据 id 来查找到对应的单篇文档，也可以通过搜索精确的关键词，来查找到多篇文档。\n\n比如搜索 “鱼皮”，能搜出文档 1、2。\n\n但是，如果你搜索 “鱼皮程序员”，是无法得到搜索结果的，因为没有任何一个文档的内容，完全包含 “鱼皮程序员” 这个词（文档内容 2 只有 “鱼皮”、“程序员” 这两个词）。\n\n而在搜索引擎数据库中，首先会将文档内容按照单词进行分割，也就是 **分词** 。然后再构建单词到文档 id 的映射，示例结构如下：\n\n| 单词   | 文档 id |\n| ------ | ------- |\n| 感谢   | 1, 3    |\n| 关注   | 1, 3    |\n| 鱼皮   | 1, 2    |\n| 程序员 | 2       |\n\n\n\n有了上述的倒排索引，当用户搜索 “鱼皮程序员” 时，搜索引擎数据库会先对搜索词进行分词，得到 “鱼皮” 和 “程序员”，然后根据这两个词汇就能找到文档 id 1、2 了。不用再去遍历表内所有的数据，实现了更灵活、快速的 **模糊搜索** 。\n\n此外，搜索引擎数据库还支持 **相关性排序** ，能够根据用户的搜索词对所有搜索结果进行打分，把最接近的文档排到最上面。\n\n主流的搜索引擎数据库技术有 Elasticsearch、Apache Solr、Apache Lucene 等，一般更建议大家学习 Elasticsearch，这玩意更新迭代地老快了。\n\n\n\n### 文档数据库\n\n顾名思义，文档数据库适用于存储和管理 **半结构化的** 文档数据，比如存储 JSON 格式。\n\n相比于关系型数据库中明确定义的表格行列，文档数据库的数据结构是类似于文档的层次化结构，每个文档都是独立的，可以包含多个不同类型和格式的数据。\n\n比如存储博客文章，示例结构如下：\n\n| 文档 ID | 文档数据                                                     |\n| ------- | ------------------------------------------------------------ |\n| 1       | {\"_id\": 1, \"title\": \"文章标题1\", \"content\": \"这是文章1的内容\"} |\n| 2       | {\"_id\": 2, \"title\": \"文章标题2\", \"author\": \"程序员鱼皮\"}     |\n\n\n\n当我们要给某个文档新增一个字段时，不需要像关系型数据库一样改变表结构，非常灵活！\n\n除了灵活之外，文档数据库也有很高的可扩展性，适用于内容管理系统（比如博客）、文档协同编辑系统等。\n\n个人比较推荐学习的文档数据库是 MongoDB，入门难度极低，对前端同学也很友好。当然，Couchbase 也是不错的。\n\n\n\n### 时序数据库\n\n时序数据库是一种专门用于高效存储和处理 **时间序列** 的数据库系统。\n\n时间序列是指以时间作为主要维度的数据序列，即每个数据单元都包含 **时间戳** 。\n\n举个例子，在实时温度监测系统中，我们需要 **每分钟连续** 收集并观察当前的温度，数据结构示例如下：\n\n| 时间戳           | 设备ID    | 温度值 |\n| ---------------- | --------- | ------ |\n| 2023-07-01 10:00 | Device001 | 25.5   |\n| 2023-07-01 10:01 | Device001 | 25.7   |\n| 2023-07-01 10:02 | Device001 | 25.8   |\n| 2023-07-01 10:03 | Device001 | 26.2   |\n| 2023-07-01 10:04 | Device001 | 26.5   |\n| 2023-07-01 10:05 | Device001 | 26.3   |\n\n\n\n有了这些数据，我们就能够按照时间范围进行高效查询、聚合分析、数据可视化。\n\n因此，时序数据库非常适用于物联网（比如传感器数据）、日志监控、金融交易数据分析等场景。\n\n主流的时序数据库技术有 InfluxDB、TimescaleDB 等。一般情况下，建议将时序数据库配合 Grafana 监控看板一起使用，实现数据存储 + 快速可视化。\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20230710175458997.png)\n\n不同时序数据库底层的存储方式也不同，我们可以简单理解为，时序数据库会根据 **时间** 字段构建索引，查询时通过索引去定位实际数据。比如 InfluxDB 使用 TSM（Time-Structured Merge Tree）作为存储引擎，底层使用 B+ 树来存储时间索引。\n\n\n\n### 向量数据库\n\n向量数据库是专门用于存储和处理 **高维向量数据** 的数据库系统。\n\n什么是向量？每个向量可以表示一个实体，并且包含多个维度的数值。\n\n举个例子，在人脸识别系统中，我们可以通过人脸的 **特征** 来判断是否为熟人。每张人脸图像，都对应一个向量；每个人脸向量有可能包含成百上千个特征，比如鼻子大小、眼睛大小等，每个特征就是一个维度。\n\n对应的数据结构示例如下：\n\n| 人脸 ID | 人脸特征向量              |\n| ------- | ------------------------- |\n| 1       | [0.1, 0.2, 0.3, ..., 0.5] |\n| 2       | [0.1, 0.3, 0.2, ..., 0.4] |\n\n\n\n在上述表格中，人脸特征向量是一个浮点数数组。数组的每个下标就表示一个特征（维度），比如下标 0 的数值表示鼻子的大小，下标 1 的数值表示眼睛大小，以此类推。。。\n\n我们只需要对比向量，就能够判断出人脸的相似度。\n\n向量数据库能够高效存储多维向量数据、计算向量的相似度、并实现各种不同算法的相似性搜索，适用于图像识别、特征提取和匹配、推荐系统等场景。值得一提的是，AI 技术的发展也带来了一波向量数据库技术的热潮，可以利用向量数据库存储投喂给 AI 的训练 Embeddings 数据。\n\n主流的向量数据库技术有 Milvus、Pinecone、Faiss 等，有些数据库（比如 PostgreSQL）可能也支持存储向量类型的字段。\n\n关于向量数据库的底层实现，还是比较复杂的。类似于上面提到的时序数据库，向量数据库的实现关键也是索引的设计。常见的向量索引结构有倒排索引、KD 树、球树等，可以理解为对相似的向量数据进行了分组和编码，从而实现更快速地检索匹配相似向量。此外，向量数据库往往也会采用并行计算来加速处理。\n\n\n\n### 空间数据库\n\n空间数据库是专门用于存储和处理 **地理空间数据** 的数据库系统。\n\n地理空间数据是指基于地理 **坐标系** 的 **几何对象** ，比如某个物体所处的经纬度或三维坐标（点）、某个物体的轮廓（线）、某个物体的表面（面）等。\n\n举个例子，假如你想存储自己房间内每个物体的位置信息，对应的数据结构可能是：\n\n| 物体 ID | X 坐标 | Y 坐标 | Z 坐标 |\n| ------- | ------ | ------ | ------ |\n| 1       | 2.5    | 3.0    | 1.8    |\n| 2       | 1.0    | 4.2    | 2.3    |\n| 3       | 3.7    | 2.1    | 1.5    |\n\n\n\n使用空间数据库，能够高效地存储、查询和分析空间数据，比如计算两个空间是否相交、对路径进行规划、可视化地理空间等。\n\n空间数据库不仅是地理信息系统（GIS）的核心组件，还能用于实现位置导航、城市路面规划等场景。\n\n对于具体的空间数据库技术，我了解得不多，只知道可以用 PostGIS 插件来为 PostgreSQL 支持空间数据管理能力，朋友们可以帮忙补充下。\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20230710175715334.png)\n\n至于空间数据库的底层实现，最关键的部分依然是索引。常见的 **空间索引** 结构有 R 树、Quadtree 等，这些结构可以对空间数据进行划分、聚合和编码，从而加速空间范围的查询处理。此外，空间数据库涉及大量的空间分析算法，比如最近邻查询、空间关系查询等。时间有限，不做展开说明了。\n\n\n\n### 图形数据库\n\n图形数据库是专门用于存储和处理 **图形结构数据** 的数据库系统。\n\n注意，这里的图形可不是三角形、长方形，而是指 **由节点和边构成** 的图形结构。\n\n比如我们要存储一个朋友圈关系网（即 FoF：朋友的朋友），对应的图形可能是：\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20230710180107393.png)\n\n上图中，每个用户可以表示为一个节点，用户之间的好友关系可以表示为边。\n\n在图形数据库中，需要 2 个表格来存储。\n\n节点信息表：\n\n| 节点 id | 节点名 |\n| ------- | ------ |\n| 1       | 小王   |\n| 2       | 小李   |\n| 3       | 小刘   |\n\n边信息表：\n\n| 边 id | 边类型 | 起始节点 | 结束节点 |\n| ----- | ------ | -------- | -------- |\n| 1     | 好友   | 1        | 2        |\n| 2     | 好友   | 1        | 3        |\n\n\n\n通过存储这些节点和边的信息，图形数据库就能实现快速 **查询及分析** 朋友圈网中的用户关系，并且挖掘出用户的社交情况、和其他用户的隐藏关系等。\n\n由此，图形数据库非常适于构建社交网络关系图谱、推荐系统、知识图谱等。\n\n比较主流的图形数据库有 Neo4j、TigerGraph 等，都支持复杂的图形操作和算法、以及分布式扩展，能够通过并行计算加速图形处理。\n\n图形数据库的核心实现相信学过算法的朋友们并不陌生，主要是用了类似邻接表、邻接矩阵等方式实现节点和边数据的存储，并且通过构建图形索引进行加速。\n\n\n\n### 列存数据库\n\n这是一种 **非常主流** 的数据库！区别于传统的行式数据库，列存数据库以列作为基本的存储单位，把每列的数据存储在一起。\n\n拿鱼皮公司每天的收入来举个例子，传统的行式（关系型）数据库是这么存储的：\n\n| 日期       | 销售额 | 成本 | 利润 |\n| ---------- | ------ | ---- | ---- |\n| 2022-01-01 | 500    | 600  | -100 |\n| 2022-01-02 | 280    | 450  | -170 |\n| 2022-01-03 | 290    | 480  | -190 |\n\n而在列存数据库中，底层大概是这么存储的，相当于对矩阵做了一次转置：\n\n| 日期   | 2022-01-01 | 2022-01-02 | 2022-01-03 |\n| ------ | ---------- | ---------- | ---------- |\n| 销售额 | 500        | 280        | 290        |\n| 成本   | 600        | 450        | 480        |\n| 利润   | -100       | -170       | -190       |\n\n\n\n这样一来，如果我们要统计这几天公司的总利润，不需要依次读取每一行的数据，直接 **读取所需** 的利润那一列进行计算即可，从而提高了数据分析和聚合操作的效率。\n\n此外，从计算机底层来分析，把相同类型的数据在同一列中连续存储，可以实现更好的数据压缩效果、节约空间。\n\n因此，列存数据库适用于实时数据分析、OLAP、大规模数据仓库等场景。\n\n比较主流的列存数据库技术有 Apache HBase、ClickHouse、Druid 等，都是大数据方向同学的必修课。\n\n![ClickHouse 官方演示](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20230710184405730.png)\n\n\n\n### 多模数据库\n\n最后要讲的数据库也最特别，区别于上面所有存储单一数据模型的数据库，多模数据库能够 **同时存储处理多种不同类型的数据** ，比如关系型数据、文档数据、图形数据等，非常灵活。\n\n就拿大家学编程时最常做的电商系统来举例。如果没有多模数据库，你要用关系型数据库来存储商品简略信息（比如商品名称、价格），要用文档数据库来存储可能长达几十页的商品详情，要用图数据库来存储商品推荐关系。每次看数据库信息时，要分别到三个数据库中查看。\n\n如果使用多模数据库，可以直接在同一个数据库里统一存储和管理不同类型的数据，非常方便。\n\n此外，多模数据库还支持事务，能够更轻松地实现数据的一致性和完整性，不需要手动实现跨库事务、跨库数据同步等等。\n\n比较常用的多模态数据库技术有 ArangoDB、OrientDB 等，不过一般情况下，我们在开发中也很少会用到这种数据库，感兴趣的话再学习即可。\n\n\n\n---\n\n\n\nOK，不知不觉竟然写了近 6000 字！希望这篇文章对大家有收获吧，不过我只列举了应用相对较多的数据库类型，大家如果听说过其他的数据库，欢迎评论区留言分享~",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1601072287388278786/c4xC84Ol-640.jpg",
        "language": null,
        "viewNum": 83,
        "thumbNum": 3,
        "favourNum": 2,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-07-11T12:37:40.000+00:00",
        "updateTime": "2023-07-19T10:46:35.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 1860,
          "coin": 170,
          "followeeNum": 908,
          "followNum": 6,
          "followStatus": null,
          "vipExpireTime": "2024-05-24T03:35:38.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-07-19T05:47:08.000+00:00"
        },
        "tags": [
          "文章",
          "数据库"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1676868456286261249",
        "title": "自我介绍，千万别来虚的！",
        "description": null,
        "content": "大家好，我是鲏。\n\n已经帮小伙伴改了 500 多份简历了，也发现了一些大家写简历时的共性问题。其中让我印象比较深刻的一个点就是 **自我介绍** ，基本上所有同学的自我介绍都是这么写的：\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/640.png)\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/640-20230706145231040.png)\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/640-20230706152710307.png)\n\n读这篇文章的朋友们，你是不是也是这么写自我介绍的呢？\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/640-20230706152643341.png)\n\n这么写看上去好像没什么问题，我学生时代最初的简历也是这么写的。\n\n但别忘了，你的简历是给别人看的！\n\n如果我们从面试官的角度（或者其他人的角度）客观来看，这些话无疑是正确的废话，不过是拿来凑简历字数的而已。\n\n为什么？\n\n道理很简单，夸自己谁不会呢？所以绝大多数的简历上都会出现雷同的自我评价，如果是一个热门岗位，估计面试官都能把这些内容背下来了。\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/640-20230706145231091.png)\n\n关键的问题是，**怎么样让你的自我评价有信服力** 。需要一些事例、数据、证据来证明。\n\n举些例子：\n\n1. 我学习能力强，对新技术有强烈的好奇心 => 补充：曾通过官方文档、自主查阅资料自学了 XX、XX 新技术，并通过 RSS 持续关注该技术最新动态。\n2. 我乐于从事有挑战性的工作 => 补充：我曾经担任 XX 队长，在 XX 困难的条件下，解决了 XX 问题，取得了 XX 成果。\n3. 我喜欢分享知识、善于总结 => 补充：连续 XX 天发布个人博客，发布过 XX 个学习总结等等\n4. 我很帅 => 补充个人照片\n\n这样写自我评价，就不再是虚的了，而是真的能让对方感受到你的这些能力。\n\n这里有个小技巧，可以照着目标公司的岗位描述去写自我评价，做到对号入座。\n\n![到官网看岗位描述](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/640-20230706145231138.png)\n\n比如公司要求招有团队协作经验的，那就写：我善于团队合作，曾经组队参与 XX、XX 项目，统筹负责了 XX、XX，怎么提升团队工作效率之类的。。。\n\n这样从招聘者的角度来看，你是有用心准备过的，目的性明确，也是加分项。\n\n除了写到简历上的自我评价外，我们在求职面试中的自我介绍也是一样的逻辑。自我介绍是需要精心准备的，而不是每次面试都现场 free style，那样很容易出现一些 “阿巴阿巴”、不知所云的情况。\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/640-20230706145231204.png)\n\n比较虚的自我介绍是：我是谁、来自 XX、求职意向是 XX 岗位，然后夸一番自己，有较强的学习能力什么的。。。\n\n而比较稳的自我介绍是：我是谁、来自 XX、求职意向是 XX 岗位，主动学过哪些技能、哪些技能学的比较好、通过什么方式自主学习，然后用事例来证明自己哪些能力比较强。\n\n比如我会说：自己拥有丰富的项目经验，大学曾带领工作室建设多少个网站，自主参与过 XX 项目和竞赛，曾在 2 家公司实习并负责 XX 工作；自己乐于分享、总结能力强，大学开展过 XX 场分享讲座等等。\n\n总之，逻辑清晰，有理有据，面试官会很喜欢你的。\n\n程序员求职面试，技术是一方面，另一方面是通过你的准备用心程度以及线上的交流来 get 到你的综合能力（沟通能力、逻辑思维能力等）。大家都学一样的技术，那么拉开差距的就是其他的能力以及你如何展现这些能力了。\n\n大概就聊到这里，大家还是要注重日常的积累，有一定经历，在写自我评价、介绍自己的时候才会更有底气。\n\n---\n\n欢迎学编程的朋友们加入鱼皮的编程学习圈子(yupi.icu) ，和上万名学编程的同学共享知识、交流进步，学习原创项目并享有答疑指导服务。",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1601072287388278786/estZdJNB-7.6.png",
        "language": null,
        "viewNum": 192,
        "thumbNum": 6,
        "favourNum": 3,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-07-06T08:19:29.000+00:00",
        "updateTime": "2023-07-19T08:35:37.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 1860,
          "coin": 170,
          "followeeNum": 908,
          "followNum": 6,
          "followStatus": null,
          "vipExpireTime": "2024-05-24T03:35:38.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-07-19T05:47:08.000+00:00"
        },
        "tags": [
          "文章",
          "简历"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1676868047337426946",
        "title": "实习没成长，想离职了",
        "description": null,
        "content": "现在各种实习招聘基本都已经结束了，很多小伙伴成功找到了实习，但依旧很焦虑。\n\n觉得虽然成功进入公司实习，但每天基本就是做增删改查的活，对自身没有提升。所以不知道是不是应该辞职去自学。\n\n刚刚开始，一般来说公司不会把核心的活交给你的，所以应该要沉住气，先把眼下的工作做到最好，要是干完活有空闲的时间可以再去多了解了解公司的业务逻辑，自己去学习提升，积累经验。\n\n以下是一个相关的经典问题，希望能给大家做一个参考。\n\n---\n\n\n\n### 小伙伴的提问：\n\n鱼哥您好，我现在实习了一周多，目前负责的是 OA 系统的开发，基本都是 crud，感觉写这些对自身的成长没有什么帮助，写这些系统最大的感觉就是都是在写业务，理解了业务自然就能写出来了，没什么技术含金量，感觉我自学都比在那写 crud 成长来得快 \n\n目前的两个月的学习进度： \n\n啃了一遍 Spring 源码，再次深入学了一遍设计模式并应用到我自己的项目中了，JUC 两周内可以学完，我现在的想法是学完 JUC 再把鱼皮最新的两个项目学完并替换我自己的 lowB 项目然后再去继续投简历，不知道时间是否来得及，也不知道是否应该再学完 jvm 再去投？  \n\n问题： \n\n1.我是否需要应该辞职回校自学？如果回校自学我担心缺少一段实习经历对我秋招求职会有很大影响 \n\n2.现在也是银四阶段，我是否应该继续投递简历选择一家更好的公司？ \n\n3.我想知道一个公司的实习生(Java 后端方向)应该负责什么业务会对其自身成长有较大的帮助 \n\n4.我询问其他实习的同学，他们都说实习阶段公司都是把你当新人，基本不会给有难度的活给你干的，到时简历书写实习经历时，把自己个人的有含金量的项目搬到实习经历那里即可，这种做法是否可取呢？\n\n\n\n### 鱼皮答：\n\n说下我自己的感受哈，我觉得小伙伴有点点浮躁了，或者说对于实习工作的预期太高。 \n\n本来你作为实习生，才实习一周多，系统可能都没完全熟悉呢，公司怎么会把核心的业务、有挑战的事情交给你呢？（创业公司除外）即使是正式工作，很多公司的工作内容也不会特别有挑战，增删改查肯定还是大多数，即使等你正式工作了一样是写业务，到时候也不能说跑就跑。\n\n记得我第一次实习，因为业务复杂、我又不熟悉系统，前两周就画了个流程图，我没有抱怨，反而觉得挺开心的，感觉自己是踏实地完成了一件有复杂度的工作。虽然现在看起来也不难、而且那两周一行代码没写，但是在那时感觉还是给自己带来了不小的进步 —— 起码知道面对复杂的业务，要先理清业务流程、做好设计后再写代码。 \n\n另外我在腾讯实习得到的经验 —— 不要把业务系统想的太简单，多关注项目细节。我大三暑假实习那会儿，刚开始年轻气盛，我也觉得老大给我的需求就是增删改查、很简单，我说 3 天就能完成。结果实际开发中，遇到了各种自己没有注意到的业务细节问题（比如前人约定的一些业务规则），导致大量的返工，最后花了快 2 周才上线。 \n\n也可能是现在时代变了吧，感觉大家都挺着急的，其实你完全可以这么想：你实习有 3 个目的，1 是积累经验，2 是收获一段实习经历，3 是给自己的简历增加项目。 \n\n首先不是说这家公司在压榨你，如果觉得公司的工作简单，那你可以快速地完成工作，然后自学，而不是辞职，这样你就有了一段实习经历（一般要 2 个月左右）。\n\n 其次，你应该学会利用好公司的项目等资源来提升自己，而不是别人给你安排什么、就机械地做什么。比如你觉得项目简单，能不能把你自学到的项目优化技巧应用到这个项目中？能不能完全吃透这个项目，把它变成自己的？这比你自己从 0 开始做 1 个项目要方便多了，而且成果的体现也更明显，光明正大地写到简历上。\n\n 至于其他的问题，你可以持续投递简历，但记住我上面说的话 “别对实习的工作有太高的期待，更不要眼高手低”，折腾来折腾去说不定还没有第一家的体验好。想要自身成长，环境是一方面，更多的则取决于 “自身”，心态要端正。\n\n---\n\n欢迎学编程的朋友们加入鱼皮的编程学习圈子(yupi.icu) ，和上万名学编程的同学共享知识、交流进步，学习原创项目并享有答疑指导服务。\n",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1601072287388278786/i7j09CYN-640 13.56.43.png",
        "language": null,
        "viewNum": 88,
        "thumbNum": 3,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-07-06T08:17:51.000+00:00",
        "updateTime": "2023-07-18T02:50:06.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 1860,
          "coin": 170,
          "followeeNum": 908,
          "followNum": 6,
          "followStatus": null,
          "vipExpireTime": "2024-05-24T03:35:38.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-07-19T05:47:08.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1675756953717968897",
        "title": "这些代码，差点把我气出内伤",
        "description": null,
        "content": "大家好，我是鱼皮，一个正在烂代码的泥潭里面摸爬滚打的程序员。\n\n先问大家一个小问题：你觉得看别人代码累，还是自己写代码累？\n\n我相信有很多朋友会说，当然是自己写代码累了，要思考逻辑、要动手敲键盘，身心俱疲啊；但是，如果你需要经常阅读别人的代码，尤其是烂代码，答案就不一定了。\n\n因为自己写代码，逻辑是自己来梳理的、代码自己是熟悉的；但是看别人的代码，你就要去理解别人的代码逻辑，再加上烂代码的加持，可能很简单的逻辑，你都得看半天才能懂。所以很多大佬在面对前人的 “屎山” 项目时，宁愿自己重写，也不去读烂代码。\n\n举个夸张的例子：让你实现 1 + 1 的求和\n\n自己写：\n\n```javascript\nlet sum = 1 + 1;\n```\n\n某烂代码可能是：\n\n```javascript\nlet a = {};\nlet b = {};\n\na.toString = function() {\n  return 1;\n};\n\nb.valueOf = function() {\n  return \"1\";\n};\n\nlet sum = a + b;\n```\n\n把简单的逻辑搞复杂，便是绝大多数程序员的拿手好戏（当然也包括我）。\n\n因为我从大学就开始带团队做项目了嘛，所以经常会审查团队同学的代码，做好二次校验。包括现在虽然开公司了，前端 / 后端同学的代码，也都会在我这过一遍才会发布上线。\n\n总之算是看了很多代码，其中有一些真的是让我哭笑不得。下面给大家分享一些代码片段出来，希望大家 **不要学习** 。\n\n\n\n#### 1、过于抽象的命名\n\n还记得咱们刚学编程的时候，变量的命名都是用的 abcdefg。\n\n自学时这么写完全没问题，但是在实际项目中，如果还用过于抽象的命名，那就不太合适了。\n\n比如下面这段，大家能看懂是什么意思么？\n\n```js\nconst [l, setL] = useState<boolean>(false);\nconst [d, setD] = useState<any>();\n```\n\n但如果我稍微完善下命名呢：\n\n```js\nconst [loading, setLoading] = useState<boolean>(false);\nconst [data, setData] = useState<any>();\n```\n\n很多同学应该立刻能看懂了，一个是 “加载中” 的变量，一个是 “存储数据” 的变量。\n\n最好的代码应该是不用写注释的，因为 **代码即注释** 。如果你能把命名做到 “见名知义”，看代码的人会极度舒适。\n\n\n\n#### 2、有深度的代码\n\n比如下面这段：\n\n```javascript\nif (condition1) {\n  // 逻辑 A\n  if (condition2) {\n    // 逻辑 B\n    if (condition3) {\n      // 逻辑 C\n      if (condition4) {\n        // 逻辑 D\n      }\n    }\n  }\n}\n```\n\n这里的深度有 2 重含义，一重是字面意思：代码一层嵌一层、深不见底；另外一重是指真的 “很有深度” —— 指让人看不懂。\n\n阅读这段代码的感觉就像是你在一座巨大的迷宫里，每次转弯都要判断下是左还是右，最后你只会迷失方向。\n\n如何改进呢？\n\n最简单直接的方法就是使用早返回策略（early return）：\n\n```javascript\nif (!condition1) \n\t// 逻辑 A\n\treturn;\nif (!condition2)\n  // 逻辑 B\n\treturn;\nif (!condition3)\n  // 逻辑 C\n\treturn;\nif (!condition4)\n  // 逻辑 D\n\treturn;\n```\n\n这样，你的代码就清晰了很多，阅读这种代码的感觉就像是走在了一条直路上，前方的路一目了然。\n\n当然，还可以将一些逻辑抽象成独立函数来简化代码，或者使用设计模式来优化。\n\n怎么判断一段代码是否过于复杂、应该优化了呢？这里提到一个概念： **圈复杂度** ，这是一种量化代码复杂程度的概念。通常你代码中的 if else 分支越多，圈复杂度就越高，代码就越复杂。\n\n企业中一般建议圈复杂度不要超过 10 - 15，我个人的编码习惯是一般不会在代码中出现 3 层以上的嵌套（除非必要）。\n\n\n\n#### 3、冗余代码\n\n这是我遇到最多的问题！分为 3 种情况：\n\n1. 能用一行代码搞定，偏偏要写 10 行\n2. 能用一个变量或函数搞定，偏偏每次都是复制粘贴重复写\n3. 没有用到的代码，又不舍得删除\n\n\n\n举个例子，下面这段前端代码，大家觉得有什么问题：\n\n> 这是我们鱼聪明 AI 前端开发过程的真实代码\n\n```react\n<Spin spinning={!(currDownloadUrl || originPictureUrl || pictureUrl)}>\n  {type === DRAW_APP ? (\n    drawImg(image)\n  ) : (\n    drawImg(currDownloadUrl || originPictureUrl || pictureUrl)\n  )}\n</Spin>\n```\n\n\n\n\n\n第一眼看到这段代码时，我就发现了，判断 spinning（旋转）的代码逻辑比较复杂，包含了两个 `||` 逻辑。而下面的 `drawImg` 函数的参数中，又包含了这段一模一样的逻辑。这段判断，其实就是冗余代码，完全没必要写两遍！\n\n我调整过后的代码如下：\n\n```javascript\n// 要展示的图片地址\nconst showPictureUrl = currDownloadUrl || originPictureUrl || pictureUrl;\n```\n\n直接定义一个通用变量，写上清晰的注释，其他地方要使用时就无需关注内部判断逻辑，看注释就行了。\n\n这就是所谓的 **DRY 原则**（Don't Repeat Yourself） ，尽量避免代码冗余。如果你在多处写下相同的代码，那么当需要修改这段代码时，你就需要在所有这些地方都修改，漏一个地方就是一个 Bug。\n\n还有，关于项目中没有用到的函数和变量，如果你近期没有使用计划，不妨就删除或者注释掉，别舍不得。利用好 Git 版本控制系统，只要你的代码提交信息写得好，要用到被删掉的历史代码时，去提交记录里找即可。\n\n> 注意，如果是学习时写代码，多保留一些也是合理的。但企业项目中，项目代码精简凝练些会更好。\n\n\n\n这里打个比方，写代码就像是我在公司里堆东西，一开始总觉得多一点没关系，反正有空间。但是，冗余代码就像是杂物，会越堆越多，迟早有一天，会影响到你，就像我们公司现在一样（右边有一堆杂物）：\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20230701171133600.png)\n\n\n\n大概就分享到这里，请大家在评论区 @ 出你写烂代码的同事吧 \uD83D\uDC36 ~\n\n\n\n---\n\n\n\n欢迎学编程的朋友们加入鱼皮的 [编程知识星球](https://mp.weixin.qq.com/s?__biz=MzI1NDczNTAwMA==&mid=2247539132&idx=2&sn=45af016dee0c03491750f76ba8fdbd25&chksm=e9c2be4bdeb5375d3253155b4053263109a631620b7cb9074e2fe1b4a5b1604ef92c522b606e&token=292259508&lang=zh_CN#rd) ，和 2 万多名学编程的同学共享知识、交流进步，学习原创项目并享有答疑指导服务。",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1601072287388278786/H3EBmkIl-640.jpg",
        "language": null,
        "viewNum": 194,
        "thumbNum": 3,
        "favourNum": 0,
        "commentNum": 1,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-07-03T06:42:46.000+00:00",
        "updateTime": "2023-07-19T03:23:31.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 1860,
          "coin": 170,
          "followeeNum": 908,
          "followNum": 6,
          "followStatus": null,
          "vipExpireTime": "2024-05-24T03:35:38.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-07-19T05:47:08.000+00:00"
        },
        "tags": [
          "文章",
          "Java",
          "Javascript",
          "后端",
          "前端"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1675524671698636802",
        "title": "react 新官方文档学习 描述UI",
        "description": "react新官方文档，如何创建UI页面，书写规范的代码",
        "content": "## 描述UI\n\n​\t当你使用 react 开发一段时间后，你会发现，对于前端来说，工作内容，就是把**数据**按照 UI 给定的设计稿通过代码的方法描述出来，那么在这里，处理数据（得到能够渲染到页面的数据）和 展示数据 是前端开发两个重中之重的基本功。\n\n​\t对于我来说，我喜欢在拿到 UI 稿后，先把 HTML 骨架搭建好，也就是先实现描述 UI 这一步，然后再去获取数据，处理交互，控制数据流。也就是由易到难进行开发，接下来就一起看看官方文档如何教初学者描述 UI 的吧！\n\n----\n\n**在接下来，我们会探讨如下问题**\n\n1. **如何编写第一个 React 组件**\n2. **何时以及如何创建多组件文件**\n3. **如何使用 JSX 向 JavaScript 添加标记**\n4. **如何在 JSX 中使用花括号来访问组件中的 JavaScript 功能**\n5. **如何用props配置组件**\n6. **如何有条件地呈现组件**\n7. **如何一次渲染多个组件**\n8. **如何通过保持组件的纯净来避免混淆 bug**\n\n-----\n\n​\tReact是一个用于渲染用户界面（UI）的 JavaScript 库。UI 是由按钮、文本和图像等小单元构建的。React允许您将它们组合成可重用的、可嵌套的组件。从网站到手机应用程序，屏幕上的所有内容都可以分解为组件。在本章中，您将学习如何创建、自定义和有条件地显示React组件。\n\n### 你的第一个组件\n\n重要程度：\uD83C\uDF08\uD83C\uDF08\uD83C\uDF08\uD83C\uDF08\n\n​\t**先说重点，react 组件，不仅仅是一种代码组织方式，更是一种 react 编程思维**\n\n​\tReact应用程序是从称为组件的独立UI部分构建的。React组件是一个JavaScript函数，你可以在其中添加标记。组件可以小到一个按钮，也可以大到整个页面。下面是一个 `Gallery` 组件，它是由三个 `Profile ` 组件渲染得到的\n\n```js\n// app.js\nfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3As.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\n你会在页面看到：\n\n![image-20230701221658409](C:\\Users\\30749\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230701221658409.png)\n\n#### 1. 组件是什么\n\n组件是：UI构建块\n\n​\t在前端，HTML让我们可以使用内置的标签集（如 `<h1>` 和 `<li>` ）创建丰富的结构化文档。如：\n\n```html\n<article>\n  <h1>My First Component</h1>\n  <ol>\n    <li>Components: UI Building Blocks</li>\n    <li>Defining a Component</li>\n    <li>Using a Component</li>\n  </ol>\n</article>\n```\n\n​\t这个标记代表这篇文章 `<article>` ，它的标题 `<h1>` ，以及一个（缩写）目录作为有序列表 `<ol>` 。像这样的标记，结合用于样式的 CSS 和用于交互性的 JavaScript，构成了 Web 上每个侧边栏、头像、模态框、下拉菜单等 UI 元素的基础。但是我想要**复用** 这个 article 组件，要怎么办呢？现在我们可以通过 react 来实现这个文章组件的复用\n\n​\tReact允许您将标记、CSS和 JavaScript 组合成自定义的“**组件**”，用于您的应用程序的可重用UI元素。您在上面看到的目录代码可以转换为一个 `<TableOfContents />` 组件，您可以在每个页面上呈现。在底层，它仍然使用相同的HTML标签，如 `<article>` ， `<h1>` 等。\n\n​\t随着项目的发展，您会注意到许多设计可以通过重用您已经编写的组件来组合，从而加快开发速度。我们上面的目录可以添加到任何屏幕上，使用 `<TableOfContents />` ！您甚至可以使用React开源社区共享的成千上万个组件来快速启动项目，例如Chakra UI和Material UI。这个在你使用 ant design 组件库的时候最为明显，它封装了一些通用的组件库，我们仅仅按照官方文档的要求使用即可，不需要操心任何事情\n\n#### 2. 组件在React应用中扮演的角色是什么\n\n​\t在 react 应用中，组件就像是构建应用的 “砖块”，我们可以通过不同的“砖块”（组件），快速搭建我们 react ”房子“（应用），\n\n#### 3. 如何编写你的第一个React组件\n\n**React组件是一个JavaScript函数**，这个函数返回一个 JSX 标记，可以渲染在页面上，当然，我们可以在函数中写一个这个组件的通用逻辑，例如：如何处理交互，创建一个新的组件，你应该做下面几个事情\n\n1. 导出函数\n2. 定义函数\n3. 添加标记\n\n举个例子\n\n```js\nexport default function Profile() { // 使用 export default 导出函数 Profile 定义函数\n  return ( // return一个只有一个跟标签的 html 集合，来添加标记\n    <section>\n      <Title>124</Title>\n    \t<img\n      \tsrc=\"https://i.imgur.com/MK3eW3As.jpg\"\n      \talt=\"Katherine Johnson\"\n    \t/>\n   \t</section>\n  );\n}\n```\n\n#### 4. 深入探索\n\n​\t您的React应用程序从一个“根”组件开始。通常，在启动新项目时会自动创建它。例如，如果您使用 `CodeSandbox` 或 `Create React App`，根组件在 `src/App.js` 中定义。如果您使用Next.js框架，则根组件在 `pages/index.js` 中定义。在这些示例中，您已经导出了**根组件**。细心的同学发现，react 创建的应用就是一个单文件应用（它仅仅有一个HTML文件），它的所有内容都在根组件中，都绑定在 id 为 #app 的根元素上，它里面包含了所有的子组件\n\n​\t大多数 React 应用程序都使用组件。这意味着您不仅会将组件用于可重用的部分，例如按钮，还会将其用于更大的部分，例如侧边栏、列表，甚至是完整的页面！组件是一种方便的方式来组织 UI 代码和标记，即使其中一些组件只使用一次。\n\n​\t基于React的框架将这一步进一步。它们不再使用空的 HTML 文件并让 React 通过 JavaScript “接管”页面的管理，而是还会自动从 React 组件中生成 HTML 。这使得您的应用在 JavaScript 代码加载之前就能显示一些内容。\n\n​\t然而，许多网站仅使用 React 来为现有的 HTML 页面添加交互性。它们有许多根组件，而不是一个用于整个页面。您可以根据需要使用多少或少量的 React。也就是说，你可以在你的项目指定地方使用 react\n\n⭕️注意：\n\n1.  **没有括号， `return` 之后的任何代码都将被忽略！**\n\n2. **大小写的区别，** section 小写，react 知道这是一个 HTML 标签，Title 大写 react 也就知道这是一个 React 组件\n3. **每一个组件，都应该是一个单文件**，不可以在一个组件中，再声明另一个组件，这样会产生很多问题，例如：作用域混乱\n\n```js\n// 组件可以渲染其他组件，但是你绝不能嵌套它们的定义：\n// ❌\nexport default function Gallery() {\n  // \uD83D\uDD34 Never define a component inside another component!\n  function Profile() {\n    // ...\n  }\n  // ...\n}\n// ✅ 但是更加推荐，一个组件，就放在一个文件中\nexport default function Gallery() {\n  // ...\n}\n\n// ✅ Declare components at the top level\nfunction Profile() {\n  // ...\n}\n```\n\n最后总结以下关键点\n\n- React 允许您创建组件，可重复使用的应用程序UI元素。\n- 在 React 应用中，每个 UI 都是一个组件。\n- React 组件是常规的 JavaScript 函数，但是：\n  - 他们的名字总是以大写字母开头。\n  - 它们返回 JSX 标记。\n\n### 导入和导出组件\n\n重要程度：\uD83C\uDF08\uD83C\uDF08\uD83C\uDF08\uD83C\uDF08\n\n​\t当我们一个项目，组件越来越多时候，把每个组件抽离为一个单文件，是有利于代码维护和组件复用，所以我们使用导入导出来实现组件的复用\n\n​\t您可以在一个文件中声明多个组件，但这里的缺点是**组件太多**可能会很难导航（因为一个文件代码太多会很乱）。要解决此问题，可以将组件导出到其他的文件中，然后从另一个文件导入该组件\n\n​\t\n\n```js\n// Profile.js\nexport default function Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/QIrZWGIs.jpg\"\n      alt=\"Alan L. Hart\"\n    />\n  );\n}\n```\n\n```js\n// Gallery.js\nimport Profile from './Profile.js';\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\n这里我们通过 import  和 export 的形式，实现了一个组件一个文件，在复杂组件的情况，逻辑依然清晰明了\n\n#### 1. 根组件文件是什么\n\n​\t当前位于根组件文件中，例如在此示例中命名为 `App.js` 。在 Create React App 中，您的应用程序位于 `src/App.js` 。根据您的设置，您的根组件可能位于另一个文件中。如果您使用基于文件的路由的框架，例如Next.js，每个页面的根组件将不同。\n\n#### 2. 如何导入和导出一个组件\n\n​\t当我们想要根文件不放任何组件逻辑，我们就需要把根组件都移出，这样我们就需要 import 和 export ，我们应该这么做\n\n1.  创建一个新的JS文件来放置组件。\n2.  **export** 从该文件中导出您的函数组件（使用默认导出或命名导出）。\n3.  **import** 将其导入到将使用该组件的文件中（使用相应的默认导入或命名导出技术）。\n\n#### 3. 何时使用默认和命名的导入和导出\n\n⭕️注意：这里导出，我们即可使用 export default 这样默认导出（这里就只能有一个 export default ），也可以 export 一个变量（这里可以有多个 export ），这里是 JavaScript 的 ES6 modules 具体详情可点击：[Module 语法](https://es6.ruanyifeng.com/#docs/module)\n\n![image-20230702134216899](https://blog-1304565468.cos.ap-shanghai.myqcloud.com/blog/image-20230702134216899.png)\n\n⭕️注意：导出组件的方式决定了你必须如何导入它。如果你尝试以相同的方式导入默认导出，你将会收到一个错误！这个图表可以帮助你跟踪如果文件只导出一个组件，人们通常使用默认导出；如果文件导出多个组件和值，人们通常使用命名导出。无论你偏好哪种编码风格，都要给你的组件函数和包含它们的文件赋予有意义的名称。不推荐使用没有名称的组件，例如 `export default () => {}` ，因为这会增加调试的难度。\n\n#### 4. 如何从一个文件中导入和导出多个组件\n\n在一个文件中写多个组件，然后导出对象的格式，导出多个对象的key的value就是我们的组件\n\n#### 5. 如何将组件拆分为多个文件\n\n也就是把一个组件再拆分为多个组件\n\n最后总结一下关键点\n\n1. 根组件就是 react 项目的入口文件下的组件，例如：app.js 中导出的组件\n2. 通过导入导出组件来实现组件的复用\n3. 可以使用默认导出和命名导出，当只需要导出一个组件的时候，使用默认，导出多个的时候，使用命名导出\n\n### 使用 JSX 编写标记\n\n重要程度：\uD83C\uDF08\uD83C\uDF08\uD83C\uDF08\uD83C\uDF08\uD83C\uDF08\n\n​\t每个 React 组件都是一个 JavaScript 函数，其中可能包含一些React渲染到浏览器中的标记。React 组件使用一个名为JSX的语法扩展来表示该标记。JSX 看起来很像 HTML，但它有点严格，可以显示动态信息。\n\n​\t如果我们将现有的HTML标记粘贴到React组件中，它并不总是有效，例如：当你 return 多个跟元素，它就会报错，因为 JSX 语法规定跟组件只能有一个，原因，我在上一篇写 [React 初级开发常见错误](https://mp.weixin.qq.com/s/39twxTGopHatpB6ZUW6aCA)有写\n\n⭕️注意： **JSX**和 React 是两个独立的东西。它们经常一起使用，但你也可以独立使用它们。JSX 是一种语法扩展，而 React 是一个 JavaScript 库。\n\n#### JSX的规则\n\n1. 返回一个根元素，如果需要返回多个元素，请使用 `<></>` 将其包裹起来\n2. 关闭所有标签，也就是任何标签都应该是关闭的 例如 `<img />`\n3.  骆驼命名法几乎所有的东西 例如：` className`  **由于历史原因， `aria-*` 和 `data-*` 属性在 HTML 中以破折号的形式书写。**\n\n总结一下：\n\n1. React 组件将渲染逻辑与标记组合在一起，因为它们是相关的。\n2. JSX 与 HTML 类似，但有一些区别。如果需要，您可以使用转换器。\n3. 错误消息通常会指导您修复标记。\n\n### JSX中带花括号的 JavaScript\n\n重要程度：\uD83C\uDF08\uD83C\uDF08\uD83C\uDF08\uD83C\uDF08\n\n​\t它就像是给HTML 赋予了超能力，让 HTML 可以动态展示信息，\n\n​\tJSX允许您在 JavaScript 文件中编写类似 HTML 的标记，将呈现逻辑和内容保持在同一位置。有时候，您可能希望在标记中添加一些 JavaScript 逻辑或引用一个动态属性。在这种情况下，您可以在JSX中使用花括号来“打开一个窗口”到 JavaScript：\n\n1. 传递带引号的字符串，例如：给 `img` 标签一个动态图片地址 `<img src={picture} />` ，这里picture 就是`img`的地址\n2. 使用花括号：进入JavaScript世界的窗口，例如：我们如果想要在HTML中写一个三元表达式，我们就可以使用`{  }` ，其中任何 JavaScript 表达式都可以放在花括号中，包括函数调用，例如：\n\n```js\n// 这里 name就是一个变量，渲染到页面上就是：Gregorio Y. Zara's To Do List\nexport default function TodoList() {\n  const name = 'Gregorio Y. Zara';\n  return (\n    <h1>{name}'s To Do List</h1>\n  );\n}\n```\n\n3. 只能在这两个地方使用 花括号，1. 作为JSX标签内的文本，如上， 2. 作为紧跟在 `=` 标记后的属性\n4. 使用“双大括号”：在JSX中使用CSS和其他对象，例如 CSS 的`style={{\n         backgroundColor: 'black',\n         color: 'pink'\n       }}` 和 属性的 `person={{ name: \"Hedy Lamarr\", inventions: 5 }}` \n5. 将多个表达式移入一个对象中，并在JSX中使用花括号引用它们，例如：\n\n```js\n// 这里就是在花括号中使用 person 对象，这样也是可以的\nconst person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n        alt=\"Gregorio Y. Zara\"\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}\n```\n\n\n\n### 将props传递给组件\n\n重要程度：\uD83C\uDF08\uD83C\uDF08\uD83C\uDF08\uD83C\uDF08\n\n​\tReact 组件使用 props 来相互通信。每个父组件都可以通过给子组件提供 props 来传递一些信息。Props 可能会让你想起 HTML 属性，但是你可以通过它们传递任何 JavaScript 值，包括对象、数组、函数，甚至 JSX！\n\n详情请看官方文档：https://react.dev/learn/passing-props-to-a-component\n\n### 条件渲染\n\n重要程度：\uD83C\uDF08\uD83C\uDF08\uD83C\uDF08\uD83C\uDF08\n\n​\t您的组件通常需要根据不同的条件显示不同的内容。在React中，您可以使用JavaScript语法（如 `if` 语句、 `&&` 和 `? :` 运算符）有条件地渲染JSX。在本例中，JavaScript `&&` 运算符用于有条件地呈现复选标记：\n\n```js\nfunction Item({ name, isPacked }) {\n    const [isShowLast, setIsShowLast] =  useState(false)\n  return (\n    <li className=\"item\">\n      {name} {isPacked && '✔'}\n    </li>\n  );\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item\n          isPacked={true}\n          name=\"Space suit\"\n        />\n        <Item\n          isPacked={true}\n          name=\"Helmet with a golden leaf\"\n        />\n        {\n         isShowLast ? <Item\n          isPacked={false}\n          \tname=\"Photo of Tam\"\n        \t/>: <></>\n          }\n      </ul>\n    </section>\n  );\n}\n\n```\n\n详细请看：https://react.dev/learn/conditional-rendering\n\n### 渲染列表 \n\n重要程度：\uD83C\uDF08\uD83C\uDF08\uD83C\uDF08\uD83C\uDF08\n\n​\t您通常希望显示数据集合中的多个相似组件。你可以使用JavaScript `filter()` 和 `map()` React来过滤和转换你的数据数组为一个组件数组。\n\n​\t对于每个数组项，需要指定一个 `key` （这个是非常重要且必须的）。通常，您会希望使用数据库中的ID作为 `key` 。Keys让React跟踪每个项目在列表中的位置，即使列表发生了变化。\n\n详细请看：https://react.dev/learn/rendering-lists\n\n### 保持 react 组件为纯函数\n\n一些JavaScript函数是纯函数。对于纯函数，它有以下特征：\n\n- **管好自己的事**。它不会更改调用之前存在的任何对象或变量。\n- **同样的输入，同样的输出。**给定相同的输入，纯函数应该总是返回相同的结果。\n\n​    通过严格地只将组件编写为纯函数，您可以在代码库增长时避免整个类的令人困惑的错误和不可预测的行为。这样在遇到 bug 的时候也很好排查问题出现在哪里，这里官方的例子非常的经典\n\n```js\n// 非纯函数\nlet guest = 0;\n\nfunction Cup() {\n  // Bad: changing a preexisting variable!\n  guest = guest + 1;\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaSet() {\n  return (\n    <>\n      <Cup />\n      <Cup />\n      <Cup />\n    </>\n  );\n}\n```\n\n你会看到这个结果：\n\n![image-20230701225325648](https://blog-1304565468.cos.ap-shanghai.myqcloud.com/blog/image-20230701225325648.png)\n\n​\t我们看到 同样的`<Cup />` 组件，但是渲染的结果却不相同了，这就是因为它不是一个纯函数导致的，我们可以这样写\n\n```js\nfunction Cup({ guest }) {\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaSet() {\n  return (\n    <>\n      <Cup guest={1} />\n      <Cup guest={2} />\n      <Cup guest={3} />\n    </>\n  );\n}\n```\n\n![image-20230701225443661](https://blog-1304565468.cos.ap-shanghai.myqcloud.com/blog/image-20230701225443661.png)\n\n就可以得到这个结果，这样才是我们想要的效果\n\n详细请看：https://react.dev/learn/keeping-components-pure\n\n​\t如果你都看到这里了，有几个问题考考你\n\n1.  在 JSX 中` 0 && 1` 渲染出来的是什么 \n2.  React 子组件如何接收父组件使用该组件 在标签包含的内容，例如：`<Tag>123</Tag>` 子组件如何获取这个 123\n3. 当我们在 return 中 使用 map 遍历的时候，为什么需要 key \n4. 什么是纯函数？如何保持组件为纯函数？为什么组件为纯函数是一个好事？\n\n​\t这些仅仅是对这些问题的简单总结，详细的回答，还需要我们继续看官方文档更详细的对应模块内容，希望每一个 React 开发者都看一下 dan 大神的[新官方文档](https://react.dev/)，真的很不错，通俗易懂",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1619930914211520514/PG1n3JTb-鱼聪明AI绘画.jpg",
        "language": null,
        "viewNum": 38,
        "thumbNum": 1,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1619930914211520514",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-07-02T15:19:46.000+00:00",
        "updateTime": "2023-07-16T23:54:46.000+00:00",
        "user": {
          "id": "1619930914211520514",
          "planetCode": "1012",
          "userName": "SnailRun",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/aRneVaen8XSWOILibfkW5SHicYZia2oDxA8zKUtnzLRVFbwiclEK8f80QMRk3kviawzL8gTWk4MgA0P0VeF1r0O0upg/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": "https://github.com/chaseFunny",
          "blog": "https://chasefunny.github.io/",
          "score": 0,
          "coin": 0,
          "followeeNum": 11,
          "followNum": 3,
          "followStatus": null,
          "vipExpireTime": "2024-02-13T14:37:59.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-01-30T05:30:01.000+00:00",
          "updateTime": "2023-07-18T05:53:41.000+00:00"
        },
        "tags": [
          "文章",
          "React"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1673970362427117570",
        "title": "新项目搞完啦！！！",
        "description": null,
        "content": "大家好，我是鱼皮。\n\n经过了 7 场直播，总时长近 20 小时，我在 [自己的编程导航](https://mp.weixin.qq.com/s?__biz=MzI1NDczNTAwMA==&mid=2247539132&idx=2&sn=45af016dee0c03491750f76ba8fdbd25&chksm=e9c2be4bdeb5375d3253155b4053263109a631620b7cb9074e2fe1b4a5b1604ef92c522b606e&token=145986907&lang=zh_CN#rd) 的第 5 个 **全程直播开发** 的项目 ——  智能 BI 项目，完结啦！\n\n![](https://yupi.icu/img/image-20220419224055491.png)\n\n我在这里对该项目做一个简单的总结，希望让更多需要它的同学看到，把它变成自己的项目~\n\n\n\n## 项目简介\n\n这次做的是一个顺应潮流的项目， 基于 React + Spring Boot + MQ + AIGC 的 **智能数据分析平台** 。\n\n区别于传统 BI，用户只需要导入原始数据集、并输入分析诉求，就能自动生成可视化图表及分析结论，实现数据分析的降本增效。\n\n>  BI：即商业智能，可以简单理解为数据分析和可视化系统\n>\n>  AIGC：指用 AI 生成内容\n\n\n\n智能分析页面：\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1687756780019-7fec8a50-a84a-4042-a2d4-bcf038a12c23-20230627180945775.png)\n\n\n\n我的图表页面：\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1687756761369-0df53610-d478-44e2-9404-49446163b7d6-20230627180946030.png)\n\n\n\n支持异步分析：\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1687756723426-f17cd6d3-302e-46d9-85e4-a54dbd768da3-20230627180946279.png)\n\n\n\n项目架构图：\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/1687756290740-41ba43c4-24b3-400f-a77a-db9321e0a200-20230627180946397.png)\n\n> 感兴趣的同学可以 **免费试看** 第一期项目回放：https://www.bilibili.com/video/BV1Cg4y1G7oy\n\n\n\n### 项目特点和收获\n\n该项目选题非常 **新颖** ，不同于泛滥的管理系统、博客、商城，本项目是结合当下最火的 **AIGC 技术** + 企业级 BI 业务场景的综合实战，紧跟时代潮流！\n\n项目中会带大家学习和实战：前后端高效开发方式、AIGC 应用开发、AI 提问技巧、系统优化、分布式限流、线程池、异步化、消息队列等一系列 **重点** 知识。\n\n鱼皮 **从 0 到 1 全程直播无剪辑** 地带大家开发完成项目，总课程时长近 **20 小时** ！从需求分析、技术选型、系统设计、项目初始化、前后端开发，每个环节我都 **从理论到实践** 给大家讲的明明白白、每个细节都不放过！\n\n除了学做项目之外，还能学会很多 **思考问题、对比方案** 的方法，提升排查问题、自主解决 Bug 的能力。\n\n还能获取到鱼皮的 **万用后端项目模板**，学习到最方便的全栈项目开发方式，熟练后 **几分钟开发一个新功能** 轻轻松松！\n\n\n\n### 本项目适合的同学\n\n本项目同时适合前端和后端，但是会更侧重后端。\n\n如果你是后端，已经学习过 Java Web 开发技术，希望做一个新颖的、有亮点的、写在简历上加分的项目，学习热门的 AIGC 应用开发、提升自己的编程和架构设计能力，那么非常欢迎来学习！\n\n如果你是前端，最好已经学习过 Vue 或 React 框架，可以通过本项目学习到快速开发前端项目的技巧，并且通过保姆级的入门实战学会一些后端技术。\n\n再介绍下这个项目用到的技术，都是主流的~\n\n\n\n### 技术选型（全栈项目）\n\n#### 前端\n\n- React 18\n- Ant Design Pro 5.x 脚手架\n- Umi 4 前端框架\n- Ant Design 组件库\n- Echarts 可视化库\n- OpenAPI 前端代码生成\n\n\n\n#### 后端\n\n- Java Spring Boot（万用后端模板）\n- MySQL 数据库\n- MyBatis-Plus 及 MyBatis X 自动生成\n- Redis + Redisson 限流\n- RabbitMQ 消息队列\n- 鱼聪明 AI SDK（AI 能力）\n- JDK 线程池及异步化\n- Easy Excel 表格数据处理\n- Swagger + Knife4j 接口文档生成\n- Hutool、Apache Common Utils 等工具库\n\n\n\n再列举下项目的大纲，这只是其中让我印象比较深刻的关键环节，直播过程中还讲了很多平时大家自己看视频根本学不到的做项目经验和编码技巧，比如：怎么又稳又快地自学一个新技术。\n\n\n\n## 项目大纲\n\n1. 项目介绍和计划\n   1. 需求分析\n   2. 技术选型\n   3. 业务流程和系统架构\n2. 前端项目初始化\n   1. Ant Design Pro 项目搭建\n   2. 初始化项目精简\n3. 后端项目初始化\n   1. Spring Boot 万用模板使用\n   2. 库表设计\n   3. 基础代码生成\n4. 前端基础开发联调\n   1. OpenAPI 代码生成\n   2. 前端模板代码优化\n   3. 登录功能开发\n5. **智能分析业务开发**\n   1. 业务流程梳理\n   2. AI 助手使用\n   3. 原始数据压缩\n   4. AIGC 入门实战\n   5. AIGC 提问技巧\n   6. 3 种 AI 调用方式\n   7. 后端接口开发\n6. 图表管理功能\n   1. 前端开发\n7. **系统分析及优化**\n   1. 文件安全性\n   2. 数据存储 - 分库分表\n   3. 限流 - 4 种限流算法\n   4. 限流 - Redisson 分布式限流实战\n8. **系统异步化改造**\n   1. 异步化业务流程\n   2. 线程池精讲（入门 + 原理 + 实战 + 面试）\n   3. 异步化改造 - 前端开发\n   4. 异步化改造 - 后端开发\n   5. 优化点扩展\n9. 系统现状分析\n10. 消息队列\n    1. 基础概念\n    2. 应用场景\n    3. 主流队列技术选型\n11. **RabbitMQ 入门实战**\n    1. AMQP 协议和基础概念\n    2. 5 种队列模型理论及实战\n    3. 核心特性 - 消息过期\n    4. 核心特性 - 消息确认\n    5. 核心特性 - 死信队列\n    6. 客户端介绍及 demo 开发\n12. BI 项目分布式队列改造\n\n\n\n## 项目资料\n\n我们整理好了项目完整源代码、详细的直播笔记和直播大纲，便于大家交流学习。\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20230627181952915.png)\n\n最关键的是，鱼皮已经整理好了这个项目的简历写法、亮点和扩展思路（30 个左右），做完项目后就能直接填满简历！\n\n\n\n---\n\n\n\n因为项目是在我的 [编程导航知识星球](https://mp.weixin.qq.com/s?__biz=MzI1NDczNTAwMA==&mid=2247539132&idx=2&sn=45af016dee0c03491750f76ba8fdbd25&chksm=e9c2be4bdeb5375d3253155b4053263109a631620b7cb9074e2fe1b4a5b1604ef92c522b606e&token=145986907&lang=zh_CN#rd) 内直播做的，所以自然不能给大家免费发放啦。（要不然又成为一个泛滥的项目了）\n\n大家如果对这个项目感兴趣，欢迎加入编程导航，加入后可以跟着后续的直播做新项目、**随时观看** 超清完整的 **全部直播回放** 、完整的项目笔记以及踩坑指南、最新的项目源码等。\n\n最关键的是：做项目的过程中，有任何问题，都可以和大家一起交流或者 **直接向鱼皮本人提问** ！\n\n已经有不少小伙伴学起来了，还有很多大家自发整理的笔记。不得不说，做项目真的给了很多同学一个坚持学习的目标，大家的动力也更足了！\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20230627182431190.png)\n\n关于 [编程导航知识星球](https://mp.weixin.qq.com/s?__biz=MzI1NDczNTAwMA==&mid=2247539132&idx=2&sn=45af016dee0c03491750f76ba8fdbd25&chksm=e9c2be4bdeb5375d3253155b4053263109a631620b7cb9074e2fe1b4a5b1604ef92c522b606e&token=145986907&lang=zh_CN#rd) ，我已经运营很久了，就不过多地介绍了，感兴趣的同学可以自行扫下方二维码加入体验，三天内不满意可全额退款~\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/%E7%BB%93%E6%9D%9F.jpg)\n\n",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1601072287388278786/al84XGPF-640.png",
        "language": null,
        "viewNum": 165,
        "thumbNum": 5,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-06-28T08:23:29.000+00:00",
        "updateTime": "2023-07-19T03:56:43.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 1860,
          "coin": 170,
          "followeeNum": 908,
          "followNum": 6,
          "followStatus": null,
          "vipExpireTime": "2024-05-24T03:35:38.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-07-19T05:47:08.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      }
    ],
    "total": "128",
    "size": "10",
    "current": "1",
    "orders": [],
    "optimizeCountSql": true,
    "searchCount": true,
    "countId": null,
    "maxLimit": null,
    "pages": "13"
  },
  "message": "ok"
}